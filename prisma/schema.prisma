// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model CountOrder {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  count Int      @default(0)
  date  DateTime @default(now())

  @@map("bonari-pizzaria-dev-count-orders")
}

type FormOfPayment {
  name          String
  totalReceived Float
  needChange    Boolean @default(false)
  totalChanged  Float?
}

type Address {
  cep          String
  uf           String
  city         String
  neighbothood String
  street       String
  streetNumber String
  complement   String
  localityId   String?
}

model Client {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  phoneNumber String
  password    String
  addresses   Address[]
  orders      Order[]

  createdDate DateTime
  updatedDate DateTime
  AccessToken AccessToken[]

  @@map("bonari-pizzaria-dev-clients")
}

type ClientType {
  id          String?
  email       String?
  phoneNumber String
  name        String
  addresses   Address[]
  createdDate DateTime
  updatedDate DateTime
}

model Order {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  orderId       Int
  startDate     DateTime        @default(now())
  updateDate    DateTime?
  status        String
  clientInfo    ClientType
  client        Client?         @relation(fields: [clientId], references: [id])
  clientId      String?         @db.ObjectId
  items         Item[]
  address       Address?
  isDelivery    Boolean         @default(true)
  deliveryFee   Float
  total         Float
  formOfPayment FormOfPayment[]

  @@map("bonari-pizzaria-dev-orders")
}

model OrderOfTable {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId         Int
  startDate       DateTime      @default(now())
  updateDate      DateTime
  status          String
  client          ClientAtTable @relation(fields: [clientAtTableId], references: [id])
  clientAtTableId String        @db.ObjectId
  items           Item[]
  total           Float

  @@map("bonari-pizzaria-dev-orders-of-table")
}

model ClientAtTable {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  tableId       String
  startDate     DateTime        @default(now())
  updateDate    DateTime
  isOpen        Boolean
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  orders        OrderOfTable[]
  total         Float
  formOfPayment FormOfPayment[]

  @@map("bonari-pizzaria-dev-clients-at-table")
}

type Item {
  observation String?
  category    String?
  type        String
  pieces      Int
  aditionals  AditionalType[]
  products    ProductType[]
  quantity    Int
  subTotal    Float
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String
  price       Float
  category    String
  isEnable    Boolean @default(true)

  createdDate DateTime
  updatedDate DateTime

  @@map("bonari-pizzaria-dev-products")
}

type ProductType {
  id          String
  name        String
  description String?
  price       Float
  category    String
  isEnable    Boolean @default(true)

  createdDate DateTime?
  updatedDate DateTime?
}

model Aditional {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  price    Float
  quantity Int
  isEnable Boolean @default(true)

  createdDate DateTime
  updatedDate DateTime

  @@map("bonari-pizzaria-dev-aditionals")
}

type AditionalType {
  id          String
  name        String
  price       Float
  quantity    Int
  isEnable    Boolean   @default(true)
  createdDate DateTime?
  updatedDate DateTime?
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phoneNumber   String
  email         String?         @unique
  password      String
  role          RoleUser        @default(USER)
  isEnable      Boolean         @default(true)
  clientAtTable ClientAtTable[]

  createdDate DateTime
  updatedDate DateTime
  AccessToken AccessToken[]

  @@map("bonari-pizzaria-dev-users")
}

model AccessToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?  @db.ObjectId
  clientId     String?  @db.ObjectId
  client       Client?  @relation(fields: [clientId], references: [id])
  token        String
  refreshToken String
  expired      Boolean  @default(false)
  createdDate  DateTime
  updatedDate  DateTime

  @@map("bonari-pizzaria-dev-access-token")
}

model Locality {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  price Float

  @@map("bonari-pizzaria-dev-locality")
}

enum RoleUser {
  ADMIN
  USER
  WAITER
}
